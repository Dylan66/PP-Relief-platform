"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-upfa%o0ub_4xgiio@)iz=a*%%9y&m^bt@g9mmgj4u0(fpo*bof' # **CHANGE THIS IN PRODUCTION**

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # **SET TO FALSE IN PRODUCTION**

ALLOWED_HOSTS = [] # **ADD YOUR DOMAIN IN PRODUCTION**


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required by allauth/dj-rest-auth

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Required by dj-rest-auth Token Authentication
    'allauth', # Required by dj-rest-auth registration
    'allauth.account', # Required by dj-rest-auth registration
    'allauth.socialaccount', # Required by dj-rest-auth.registration.views
    'dj_rest_auth', # Core dj-rest-auth app
    'dj_rest_auth.registration', # dj-rest-auth registration app

    # Optional: CORS middleware (install django-cors-headers)
    # 'corsheaders',

    # Your apps
    'api.apps.ApiConfig', # Your custom app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # Optional: CORS middleware (install django-cors-headers)
    # 'corsheaders.middleware.CorsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Required by django-allauth
]

# Optional: CORS settings (install django-cors-headers if using)
# CORS_ALLOW_ALL_ORIGINS = True # WARNING: NOT safe for production, use CORS_ALLOWED_ORIGINS
# CORS_ALLOWED_ORIGINS = [ # Example
#     "http://localhost:5173", # Your frontend dev server
# ]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), # Use BASE_DIR directly
    },
    # Later you might switch to PostgreSQL:
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'your_db_name',
    #     'USER': 'your_db_user',
    #     'PASSWORD': 'your_db_password',
    #     'HOST': 'localhost', # or your db host
    #     'PORT': '5432',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Use Token Authentication for API requests
        'rest_framework.authentication.TokenAuthentication',
        # SessionAuthentication is useful for browsable API & potentially web app if not fully decoupled
        'rest_framework.authentication.SessionAuthentication', # Keep for admin access or browsable API
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Default to denying access unless explicitly allowed per view
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        # Or during early development, temporarily use:
        # 'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10 # Default pagination size
}

# --- dj-rest-auth & allauth Settings ---
SITE_ID = 1 # Required by allauth/dj-rest-auth
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # For testing registration email verification

# Configure dj-rest-auth to use your custom serializers
REST_AUTH = {
    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer', # Default login serializer
    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer', # Default token serializer
    'USER_DETAILS_SERIALIZER': 'api.serializers.CustomUserDetailsSerializer', # <-- Use your custom serializer for user details
    'REGISTER_SERIALIZER': 'api.serializers.RegisterSerializer', # Use your custom serializer for registration

    # Registration settings (adjust as needed)
    'REGISTER_EMAIL_VERIFICATION': False, # Set to True for production w/ email backend
    'REGISTER_AUTO_LOGIN': True, # Auto-login user after successful registration (Optional, set to False if you want them to log in after)
    # 'EMAIL_VERIFICATION_REQUIRED': True, # Require email verification to login (only if VERIFICATION_REGISTRATION is True)
}

# allauth settings (adjust as needed)
ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Allow login with username or email
ACCOUNT_EMAIL_REQUIRED = True # Make email required for registration
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'mandatory' or 'optional' if REGISTER_EMAIL_VERIFICATION is True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True # Optional: Allow clicking link to confirm
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5 # Lockout after failed attempts
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300 # Lockout duration in seconds (5 minutes)
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True # Log out other sessions on password change
ACCOUNT_UNIQUE_EMAIL = True # Ensure email is unique
ACCOUNT_USERNAME_REQUIRED = True # Make username required
ACCOUNT_FORMS = {
    # Optional: Use custom forms instead of default allauth forms
    # 'signup': 'path.to.your.CustomSignupForm',
    # 'login': 'path.to.your.CustomLoginForm',
}

# Set the authentication backends
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Redirect URLs (adjust as needed)
# These are primarily used by Django's built-in views if you use them,
# but dj-rest-auth redirects mostly happen via API responses.
# However, setting them can be good practice.
LOGIN_REDIRECT_URL = '/dashboard/' # URL to redirect after successful login (React handles routing from here)
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # URL to redirect after logout
# LOGIN_URL = '/login/' # Default Django login URL, used by @login_required etc.

# Ensure user model is correctly configured (usually AUTH_USER_MODEL is sufficient)
# AUTH_USER_MODEL = 'auth.User' # Default unless you created a custom User model